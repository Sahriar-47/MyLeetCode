class Solution {
    int bfs(string beginWord, string endWord, unordered_set<string>&st) {
        queue<pair<string, int>> q;
        q.push({beginWord, 1});
        
        while(!q.empty()) {
            string word = q.front().first;
            int numOfWord = q.front().second;
            if(word == endWord) {
                return numOfWord;
            }
            q.pop();
            st.erase(word);
            for(int i=0; i<word.size(); i++) {
                string w = word;    
                for(char ch = 'a'; ch <= 'z'; ch++) {
                    w[i] = ch; 
                    if(st.contains(w)) {
                        q.push({w, numOfWord+1});
                    }
                }
            }
        }

        return 0;
    }
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> st;
        for(int i=0; i<wordList.size(); i++) {
            st.insert(wordList[i]);
        }

        int ans = bfs(beginWord, endWord, st);
        return ans;
    }
};
