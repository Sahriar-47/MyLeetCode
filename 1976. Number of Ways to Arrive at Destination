class Pair {
    long dist;
    int node;
    Pair(long dist, int node) {
        this.dist = dist;
        this.node = node;
    }
}
class Solution {
    public int countPaths(int n, int[][] roads) {
        List<List<Pair>> adj = new ArrayList<>(n);
        for(int i=0; i<n; i++) {
            adj.add(new ArrayList<>());
        }
        for(int[] val: roads) {
            int u = val[0];
            int v = val[1];
            int t = val[2];
            adj.get(u).add(new Pair(t, v));
            adj.get(v).add(new Pair(t, u));
        }

        long[] dist = new long[n];
        int[] ways = new int[n];
        Arrays.fill(dist, Long.MAX_VALUE);
        dist[0] = 0;
        ways[0] = 1;

        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b)->
         Long.compare(a.dist, b.dist));
        pq.add(new Pair(0, 0));

        int mod = (int)(1e9+7);
        while(!pq.isEmpty()) {
            Pair cur = pq.poll();
            long time = cur.dist;
            int node = cur.node;

            for(Pair it: adj.get(node)) {
                int child = it.node;
                long t = it.dist;

                if(time + t < dist[child]) {
                    dist[child] = time+t;
                    pq.add(new Pair(dist[child], child));
                    ways[child] = ways[node]%mod;
                } else if(time+t == dist[child]) {
                    ways[child] = (ways[child] + ways[node])%mod;
                }
            } 
        }

        return ways[n-1];
    }
}
