class Solution {
    map<string, int>mp;
    vector<vector<string>>ans;
    string b;
private:
    void dfs(string word, vector<string> &seq) {
        if(word == b) {
            reverse(seq.begin(), seq.end());
            ans.push_back(seq);
            reverse(seq.begin(), seq.end());
        }
        int steps = mp[word];
        int sz = word.size();
        for(int i=0; i<sz; i++) {
            string w = word;  
            for(char ch = 'a'; ch <= 'z'; ch++) {
                w[i] = ch; 
                if(mp.find(w) != mp.end() && steps-1 == mp[w]) {
                    seq.push_back(w);
                    dfs(w, seq);
                    seq.pop_back();
                }
            }
        }

    }
public:
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> st(wordList.begin(), wordList.end());
        queue<string>q;
        q.push(beginWord);
        mp[beginWord] = 1;
        st.erase(beginWord);
        b = beginWord;

        while(!q.empty()) {
            string word = q.front();
            int steps = mp[word];
            if(word == endWord) {
                break;
            }
            q.pop();
            int sz = word.size();
            for(int i=0; i<sz; i++) {
                string w = word;  
                for(char ch = 'a'; ch <= 'z'; ch++) {
                    w[i] = ch; 
                    if(st.count(w)) {
                        q.push(w);
                        mp[w] = steps + 1;
                        st.erase(w);
                    }
                }
            }
        }
        if(mp.find(endWord) != mp.end()) {
            vector<string>seq;
            seq.push_back(endWord);
            dfs(endWord, seq);
        }
        return ans;
    }
};
