class Solution {
public:
    void dfs(int node, vector<int>adjList[], vector<int>&vis) {
        vis[node] = 1;
        for(auto &child: adjList[node]) {
            if(vis[child]) continue;

            dfs(child, adjList, vis);
        }

    }
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        vector<int> adjList[n];
        for(int i=0; i<n; i++) {
            for(int j = 0; j<n; j++) {
                if(isConnected[i][j] == 1 && i != j) {
                    adjList[i].push_back(j);
                    adjList[j].push_back(i);
                }
            }
        }
        vector<int>vis(n, 0);
        int provinces = 0;
        for(int i=0; i<n; i++) {
            if(vis[i] == 0) {
                provinces++;
                dfs(i, adjList, vis);
            }
        }
        return provinces;
    }
};
