class Solution {
private:
    bool dfs(int node, bool col, vector<int> &color, vector<vector<int>>& graph) {
        color[node] = col;

        for(auto child: graph[node]) {
            if(color[child] == -1) {
                if(!dfs(child, !col, color, graph)) {
                    return false;
                }
            }
            else if(color[child] == col)
            return false;
        }
        return true;
    }
public:
    bool isBipartite(vector<vector<int>>& graph) {
        int n = graph.size();

        vector<int> color(n, -1);
        for(int i=0; i<n; i++) {
            for(int j=0; j<graph[i].size(); j++) {
                if(color[graph[i][j]] == -1) {
                    if(!dfs(graph[i][j], 0, color, graph)) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
};
