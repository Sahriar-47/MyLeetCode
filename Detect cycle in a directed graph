class Solution {
  private:
    bool dfsCheck(int node, vector<int>&vis, vector<int>&pathVis,
    vector<vector<int>>&adj) {
        vis[node] = 1;
        pathVis[node] = 1;
        
        for(auto &child: adj[node]) {
            if(!vis[child]) {
                if(dfsCheck(child, vis, pathVis, adj)) {
                    return true;
                }
            }
            else if(pathVis[child]) {
                return true;
            }
        }
        
        pathVis[node] = 0;
        return false;
    }
  public:
    bool isCyclic(int V, vector<vector<int>> &edges) {
        
        // code here
        vector<vector<int>> adj(V);
        for(auto &ch: edges) {
            int u = ch[0];
            int v = ch[1];
            adj[u].push_back(v);
        }
        
        vector<int>vis(V, 0);
        vector<int>pathVis(V, 0);
        
        for(int i=0; i<V; i++) {
            if(!vis[i]) {
                if(dfsCheck(i, vis, pathVis, adj)) {
                    return true;
                }
            }
        }
        return false;
    }
};
