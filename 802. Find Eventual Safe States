class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<vector<int>> adjRev(n);
        vector<int>indegree(n, 0);
        for(int i=0; i<n; i++) {
            for(auto &node: graph[i]) {
                adjRev[node].push_back(i);
                indegree[i]++;
            }
        }

        queue<int> q;
        for(int node=0; node<n; node++) {
            if(indegree[node] == 0) {
                q.push(node);
            }
        }

        vector<int>ans;
        while(!q.empty()) {
            int node = q.front();
            q.pop();
            ans.push_back(node);

            for(auto &child: adjRev[node]) {
                indegree[child]--;
                if(indegree[child] == 0) {
                    q.push(child);
                }
            }
        }

        sort(ans.begin(), ans.end());
        return ans;
    }
};
