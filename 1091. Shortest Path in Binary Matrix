class Edge {
    int weight;
    int row;
    int col;
    Edge(int weight, int row, int col) {
        this.weight = weight;
        this.row = row;
        this.col = col;
    }
}

class Solution {
    boolean isValid(int n, int row, int col) {
        if(row>=0 && row<n && col>=0 && col<n)
        return true;
        else
        return false;
    }
    
    public int shortestPathBinaryMatrix(int[][] grid) {
        int n = grid.length;
        if(grid[0][0] == 1 || grid[n-1][n-1] == 1) {
            return -1;
        }
        
        int[] dx = {0, 0, -1, 1, -1, -1, 1, 1};
        int[] dy = {-1, 1, 0, 0, -1, 1, -1, 1};
        
        int[][] dist = new int[n][n];
        for(int i=0; i<n; i++) {
            for(int j=0; j<n; j++) {
                dist[i][j] = (int)(1e9);
            }
        }
        dist[0][0] = 1;
        
        PriorityQueue<Edge> pq = new PriorityQueue<>((a, b)-> a.weight - b.weight);
        pq.add(new Edge(1, 0, 0));
        
        while(!pq.isEmpty()) {
            Edge cur = pq.poll();
            int w = cur.weight;
            int r = cur.row;
            int c = cur.col;
            //pq.remove();
            
            if(r == n-1 && c == n-1)
            return w;
            
            boolean ok = false;
            for(int i=0; i<8; i++) {
                int newR = r + dx[i];
                int newC = c + dy[i];
                
                if(isValid(n, newR, newC) && grid[newR][newC] == 0
                && dist[r][c] + 1 < dist[newR][newC]) {
                    dist[newR][newC] = dist[r][c] + 1;
                    pq.add(new Edge(dist[newR][newC], newR, newC));
                }
            }
        }
        return -1;
    }
}
