class Solution {
public:
    bool isValid(int n, int m, int nrow, int ncol) {
        if(nrow>=0 && nrow<n && ncol>=0 && ncol<m)
        return true;
        return false;
    }

    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {
        int n = image.size();
        int m = image[0].size();
        vector<vector<int>>grid = image;
        vector<vector<int>>vis(n, vector<int>(m, 0));
        queue<pair<pair<int, int>, int>>q;

        int dx[] = {0, 0, 1, -1};
        int dy[] = {1, -1, 0, 0};

        int oldColor = image[sr][sc];
        q.push({{sr, sc}, oldColor});
        while(!q.empty()) {
            int row = q.front().first.first;
            int col = q.front().first.second;
            oldColor = q.front().second;
            grid[row][col] = color;
            vis[row][col] = 1;

            for(int i=0; i<4; i++) {
                int nrow = row + dx[i];
                int ncol = col + dy[i];

                if(isValid(n, m, nrow, ncol) && !vis[nrow][ncol] 
                && image[nrow][ncol] == oldColor) {
                    //grid[row][col] = color;
                    grid[nrow][ncol] = color;
                    vis[nrow][ncol] = 1;
                    q.push({{nrow, ncol}, image[nrow][ncol]});
                }
            }
            q.pop();
        }

        return grid;
    }
};
