class Solution {
public:
    bool isValid(int n, int m, int nrow, int ncol) {
        if(nrow>=0 && nrow<n && ncol>=0 && ncol<m) {
            return true;
        }
        return false;
    }
    int orangesRotting(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>>mat = grid;
        vector<vector<int>> vis(n, vector<int>(m, 0));
        queue<pair<pair<int, int>, int>> q;
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(grid[i][j] == 2) {
                    q.push({{i, j}, 0});
                }
            }
        }

        int dx[] = {0, 0, 1, -1};
        int dy[] = {1, -1, 0, 0};

        int mx_times = 0;
        while(!q.empty()) {
            int row = q.front().first.first;
            int col = q.front().first.second;
            int times = q.front().second;
            mx_times = max(mx_times, times);

            vis[row][col] = 1;
            for(int i=0; i<4; i++) {
                int nrow = row + dx[i];
                int ncol = col + dy[i];

                if(isValid(n, m, nrow, ncol) && !vis[nrow][ncol]
                && mat[nrow][ncol] == 1) {
                    //mat[nrow][ncol] = 2;
                    vis[nrow][ncol] = 1;
                    q.push({{nrow, ncol}, times+1});
                }
            }
            q.pop();
        }
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(grid[i][j] == 1 && !vis[i][j]) {
                    return -1;
                }
            }
        }

        return mx_times;
    }
};
