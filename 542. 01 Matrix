class Solution {
public:
    bool isValid(int n, int m, int nrow, int ncol) {
        if(nrow>=0 && nrow<n && ncol>=0 && ncol<m)
        return true;
        return false;
    }
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        int n = mat.size();
        int m = mat[0].size();
        vector<vector<int>>dist(n, vector<int>(m, 0));
        vector<vector<int>>vis(n, vector<int>(m, 0));
        queue<pair<pair<int, int>, int>> q;
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(mat[i][j] == 0) {
                    q.push({{i, j}, 0});
                    vis[i][j] = 1;
                }
            }
        }
        
        int dx[] = {0, 1, -1, 0};
        int dy[] = {1, 0, 0, -1};
        while(!q.empty()) {
            int row = q.front().first.first;
            int col = q.front().first.second;
            int step = q.front().second;
            dist[row][col] = step;
            
            for(int i=0; i<4; i++) {
                int nrow = row + dx[i];
                int ncol = col + dy[i];
                if(isValid(n, m, nrow, ncol) && !vis[nrow][ncol]) {
                    vis[nrow][ncol] = 1;
                    q.push({{nrow, ncol}, step+1});
                    dist[nrow][ncol] += step;
                }
            }
            q.pop();
        }
        return dist;
    }
};
