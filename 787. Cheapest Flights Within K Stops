class Pair {
    int first;
    int second;
    Pair(int first, int second) {
        this.first = first;
        this.second = second;
    }
}

class Touple {
    int first;
    int second;
    int third;
    Touple(int first, int second, int third) {
        this.first = first;
        this.second = second;
        this.third = third;
    }
}

class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        List<List<Pair>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }

        for (int[] f : flights) {
            adj.get(f[0]).add(new Pair(f[1], f[2]));
        }

        PriorityQueue<Touple> pq = new PriorityQueue<>((a, b) -> a.first - b.first);
        pq.add(new Touple(0, src, 0));

        int[] dist = new int[n];
        Arrays.fill(dist, (int) 1e9);
        dist[src] = 0;

        while (!pq.isEmpty()) {
            Touple cur = pq.poll();
            int stops = cur.first;
            int node = cur.second;
            int cost = cur.third;

           // if (node == dst && stops == k) return cost;
            if (stops > k) continue;

            for (Pair nei : adj.get(node)) {
                int next = nei.first;
                int nextCost = nei.second;
                if (cost + nextCost < dist[next]) {
                    dist[next] = cost + nextCost;
                    pq.add(new Touple(stops+1, next, cost + nextCost));
                }
            }
        }
        if(dist[dst] == (int)1e9)
        return -1;
        else 
        return dist[dst];
    }
}
