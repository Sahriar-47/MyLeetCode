
class Solution {
public:
    bool isValid(int n, int m, int nrow, int ncol) {
        if(nrow>=0 && nrow<n && ncol>=0 && ncol<m) {
            return true;
        }
        return false;
    }
    void dfs(int n, int m, int row, int col, vector<vector<int>>grid, vector<vector<int>>&vis) {
        int dx[] = {0, 0, 1, -1};
        int dy[] = {-1, 1, 0, 0};
        stack<pair<int, int>>st;
        st.push({row, col});
        vis[row][col] = 1;
        while(!st.empty()) {
            int r = st.top().first;
            int c = st.top().second;
            st.pop();
            for(int i=0; i<4; i++) {
                int nrow = r + dx[i];
                int ncol = c + dy[i];
                if(isValid(n, m, nrow, ncol) && !vis[nrow][ncol]
                && grid[nrow][ncol] == 1) {
                    vis[nrow][ncol] = 1;
                    st.push({nrow, ncol});
                }
            }
        }
    }
    int numEnclaves(vector<vector<int>>& grid) {
        int n = grid.size();
        int m  = grid[0].size();
        vector<vector<int>>vis(n, vector<int>(m, 0));

        for(int row=0; row<n; row++) {
            for(int col=0; col<m; col++) {
                if(row == 0 || row == n-1 || col == 0 || col == m-1) {
                    if(grid[row][col] == 1 && !vis[row][col]) {
                        dfs(n, m, row, col, grid, vis);
                    }
                }
            }
        }

        int ans = 0;
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(!vis[i][j] && grid[i][j] == 1)
                ans++;
            }
        }

        return ans;
    }
};
