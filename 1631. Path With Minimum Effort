class Touple {
    int weight;
    int row;
    int col;
    Touple(int weight, int row, int col) {
        this.weight = weight;
        this.row = row;
        this.col = col;
    }
}

class Solution {
    boolean isValid(int n, int m, int row, int col) {
        return row >= 0 && row < n && col >= 0 && col < m;
    }

    public int minimumEffortPath(int[][] heights) {
        int n = heights.length;
        int m = heights[0].length;

        PriorityQueue<Touple> pq = new PriorityQueue<>((a, b) -> a.weight - b.weight);
        pq.add(new Touple(0, 0, 0));

        int[] dx = {-1, 1, 0, 0};
        int[] dy = {0, 0, -1, 1};

        int[][] dist = new int[n][m];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dist[i], (int) 1e9);
        }
        dist[0][0] = 0;

        while (!pq.isEmpty()) {
            Touple cur = pq.poll();
            int w = cur.weight;
            int r = cur.row;
            int c = cur.col;

            if (r == n - 1 && c == m - 1) return w;

            for (int i = 0; i < 4; i++) {
                int newR = r + dx[i];
                int newC = c + dy[i];

                if (isValid(n, m, newR, newC)) {
                    int absDist = Math.abs(heights[r][c] - heights[newR][newC]);
                    int newEffort = Math.max(w, absDist);
                    if (newEffort < dist[newR][newC]) {
                        dist[newR][newC] = newEffort;
                        pq.add(new Touple(newEffort, newR, newC));
                    }
                }
            }
        }

        return dist[n - 1][m - 1];
    }
}
