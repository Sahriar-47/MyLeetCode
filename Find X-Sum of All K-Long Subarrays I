class Solution {
public:
    vector<int> findXSum(vector<int>& nums, int k, int x) {
        int n = nums.size();
        vector<int>ans;
        map<int,int>m;
        
        for(int i=0; i<k; i++)
        m[nums[i]]++;
        ans.push_back(xsum(m,x));

        for(int i=1; i<= n-k; i++){
            m[nums[i-1]]--;
            if(nums[i-1] == 0)
            m.erase(nums[i-1]);

            m[nums[i+k-1]]++;
            ans.push_back(xsum(m,x));
        }
        return ans;
    }
    private:
    int xsum(const map<int,int>& m, int x){
        priority_queue<pair<int,int>>pq;
        for(auto &i: m)
        pq.push({i.second,i.first});

        int sum = 0;
        for(int i=0; i<x&& !pq.empty(); i++){
            auto top = pq.top();
            pq.pop();
            sum += (top.first*top.second);
        }
        return sum;
    }
};
